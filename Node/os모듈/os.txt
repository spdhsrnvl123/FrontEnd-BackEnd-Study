8)os 객체
=>운영체제에 대한 정보를 가진 객체
=>운영체제에 대한 종류나 CPU 또는 메모리 사용량 등을 확인할 수 있는 속성 과 메서드를 제공
=>실제 서비스를 운영할 때는 메모리 사용량은 확인해보는 것이 좋습니다.
서버를 운영할 때 메모리 사용량을 주기적으로 모니터링해서 서버를 물리적으로 늘릴 것인지 여부를 판단

os 모듈
운영체제 관련 정보를 저장한 객체
내장 함수 나 속성
os.arch(): process.arch와 동일
os.platform(): process.platform과 동일
os.type(): 운영체제의 종류
os.uptime(): 운영체제 부팅 이후 흐른 시간(초)
os.hostname(): 컴퓨터의 이름
os.release(): 운영체제의 버전
os.homedir(): 홈 디렉터리 경로
os.tmpdir(): 임시 파일 저장 경로
os.cpus(): 컴퓨터의 코어 정보
os.freemem(): 사용 가능한 메모리(RAM)
os.totalmem(): 전체 메모리 용량
os.constants: 에러와 신호에 대한 정보를 가진 객체

=>windows 확인 코드
const os = require("os");

let position = os.type().toLocaleLowerCase().indexOf("windows")
if(position >= 0){
    console.log("windows");
}else{
    console.log("windows 아님");
}

=>2개를 조합해서 windows 일 때는 dir 명령을 그렇지 않은 경우에는 ls 명령을 수행하도록 작성

=>문자열을 비교할 때는 일치하는 것을 찾는 경우보다는 포함된 경우를 찾는 경우가 많습니다.
이런 경우에는 indexOf를 이용할 수 있는 indexOf는 포함된 경우에는 시작 위치를 그렇지 않은 경우는 음수를 리턴
=>문자열 비교할 때는 대소문자를 구분하는 것인지 아닌 지를 판단해서 작성해야 합니다.
