=>양방향 암호화
암호화 할 때 키를 사용해서 암호화하는 방식으로 복호화가 가능
암호화 할 때 사용한 키 와 복호화 할 때 사용한 키가 같아야만 복호화가 가능
동일한 데이터를 암호화 했을 때 암호화된 결과가 다를 수 도 있습니다.
이 데이터는 비교 연산을 잘 하지 않고 복원해서 사용하는 경우가 대부분입니다.
일반 데이터 암호화에 이용합니다.

createCipheriv(알고리즘, 키, 초기화벡터): 양방향 암호화 객체 생성
암호화 객체.update(암호화 할 문자열, 문자열 인코딩 방식 - utf8, 출력 인코딩 방식 - base64): 문자열이 리턴됨
암호화 객체.final(출력 인코딩 방식): 암호화가 완료

createDeccipheriv(알고리즘, 키, 초기화 벡터): 양방향 복호화 객체 생성 - 암호화 할 때 사용한 것을 그대로 대입
복호화 객체.update(복호화 할 문자열, 문자열 인코딩 방식 - utf8, 출력 인코딩 방식 - base64): 문자열이 리턴됨
복호화 객체.final(출력 인코딩 방식): 복호화가 완료

//암호화 모듈 가져오기
//const crypto = require("crypto");

const algorithm = "aes-256-cbc"; //알고리즘은 정해진 알고리즘이용
//Node 의 crypto 모듈에서는 key는 32자리 iv는 16자리
const key = "12345678901234567890123456789012";
const iv = "1234567890123456";

//암호화 객체 생성
let cipher = crypto.createCipheriv(algorithm, key, iv);
let result = cipher.update('01037901997', 'utf8', 'base64');
result += cipher.final('base64');
console.log(result);

//복호화
let decipher = crypto.createDecipheriv(algorithm, key, iv);
let result2 = decipher.update(result, 'base64', 'utf8');
result2 += decipher.final('utf8');
console.log(result2);