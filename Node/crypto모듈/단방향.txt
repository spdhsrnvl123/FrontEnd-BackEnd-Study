5.암호화
=>crypto 모듈을 암호화에 이용
1)암호화 방식
=>단방향 암호화
암호화는 가능하지만 암호화된 문장을 이용해서 복호화(원래 문장을 찾아내는 것)하는 것은 불가능
원본 데이터 와의 비교는 가능(동일한 문장을 암호화하면 동일한 결과가 만들어지기 때문)
해시 기법(문자열을 고정된 길이의 다른 문자열로 만드는 방식)을 주로 이용
알고리즘으로는 md5, sha1, sha256, sha512 등이 사용되는데 md5 와 sha1은 취약점이 발견되서 거의 사용하지 않는데 안드로이드에서 가끔 sha1 알고리즘을 사용합니다.
블록 체인에서는 sha256 을 사용하다가 sha512 로 변환 중입니다.
비밀번호 저장이나 블록 체인에서는 단방향 암호화를 주로 이용

crypyto 모듈
단방향 암호화
createHash(알고리즘): 사용할 해시 알고리즘을 설정
md5, sha1, sha256, sha512 등이 가능하지만 md5 와 sha1은 취약점이 발견
현재는 sha512 정도로 충분하지만 나중에 sha512마저도 취약해지면 더 강화된 알고리즘으로 변경
update(문자열): 변환할 문자열을 설정
digest(인코딩): 인코딩할 알고리즘을 설정
base64, hex, latin1이 주로 사용되는데 그중 base64가 결과 문자열이 가장 짧아 애용
변환된 문자열을 반환
pbkdf2 나 bcrypt, scrypt 알고리즘으로 비밀번호를 암호화하는데 Node는 pbkdf2 와 scrypt 지원

createHash(알고리즘): 사용할 알고리즘 설정
update(문자열): 변환할 문자열을 설정
digest(인코딩 방식): 인코딩할 알고리즘을 설정하는데 주로 base64를 많이 사용

//암호화 모듈 가져오기
const crypto = require("crypto");

let password = "1234";
//단방향 암호화 수행
let p1 = crypto.createHash("sha256")
    .update(password).digest('base64');
console.log(p1);

password = "12345";
//단방향 암호화 수행
p1 = crypto.createHash("sha256")
    .update(password).digest('base64');
console.log(p1);

let str = "12345";
p2 = crypto.createHash("sha256")
    .update(str).digest('base64');
//동일한 문자열로 암호화를 동일한 결과를 생성하기 때문에 true
console.log(p1 === p2);

str = "123456";
p2 = crypto.createHash("sha256")
    .update(str).digest('base64');
//false
console.log(p1 === p2);
