3.모듈 프로그래밍
1)Module
=>독립적으로 실행가능한 작업의 단위
=>노드에서는 하나의 파일이 모듈
=>모듈화는 중요한 작업 중의 하나
하나의 모듈에 모든 내용을 전부 작성하면 가독성이 떨어지고 재사용성이 떨어지게 됩니다.
역할 별로 나누는 작업이 중요

Controller: 클라이언트의 요청을 받아서 필요한 서비스 로직을 호출하고 응답을 클라이언트에게 전송하는 역할

Service: 사용자의 로직(Business Logic)을 처리하는 역할

Repository(DAO - Data Access Object): 데이터 저장소 와 연결해서 작업을 수행하는 역할

VO(Variable Object) - 여러 개의 속성을 묶어서 하나로 표현하기 위한 역할
DTO(Data Transfer Object) - 서로 다른 계층 사이에 전달을 위한 역할

Entity - ORM(객체 와 테이블의 행을 매핑시켜주는 프레임워크)에서 테이블 과 연결되는 역할

View - 화면 출력하는 역할

2)모듈의 내용을 내보내고 가져와서 사용
=>내용을 내보낼 파일을 생성 - var.js
const odd = "홀수";
const even = "짝수";

//다른 곳에서 사용할 수 있도록 내보내기
module.exports = {
    odd,
    even
}

=>var.js 파일의 내용을 가져와서 사용할 파일을 생성 - func.js
//var 에서 내보낸 내용 가져오기
const {odd, even} = require('./var');

const checkOddOrEvent = (num) => {
    if(num % 2){
        return odd;
    }else{
        return even;
    }
}
//이렇게 내보내면 가져올 때는 아무이름이나 사용해서 받으면 됩니다.
module.exports = checkOddOrEvent;

=>실행할 파일을 생성 - app.js
//{ }로 묶어서 내보낸 것은 이름을 맞추어서 받아야 합니다.
const {odd, even} = require('./var');
//하나를 내보냈을 때는 이름을 바꿔서 받을 수 있습니다.
//func 의 내용을 가져와서 checkNumber 라는 이름을 붙이는 것입니다.
const checkNumber = require('./func');

console.log(checkNumber(5));
