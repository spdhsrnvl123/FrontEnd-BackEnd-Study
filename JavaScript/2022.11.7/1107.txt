** JavaScript
1.Operator
1)산술 비트 연산자
=>정수 데이터를 가지고 연산을 수행하는데 연산은 비트 단위로 이루어지고 결과는 다시 10진 정수로 리턴을 해주는 연산자
=>~: 단항 연산자인데 1의 보수를 구해주는 연산자
0 -> 1, 1 -> 0
=>&: Bit AND, 2개의 데이터 모두 1일 때 만 1 그 이외의 경우는 0
=>|: Bit OR, 2개의 데이터 모두 0일 때 만 0 그 이외의 경우는 1
=>^: Bit XOR(eXclusive OR): 2개의 데이터가 같으면 0 다르면 1
=> >>: 이진수를 오른쪽으로 이동시키는 연산자 - 첫번째 비트는 이동 대상이 아님
=> >>>: 이진수를 오른쪽으로 이동시키는 연산자 - 첫번째 비트도 이동 대상이어서 양수의 경우는 >> 와 동일하지만 음수의 경우 >> 와 다르게 동작
=> <<: 이진수를 왼쪽으로 이동시키는 연산자

2)논리 연산자
=>데이터를 Boolean 형태의 하나의 값으로 간주하고 논리 연산을 수행하는 연산자
&&(AND): 둘 다 true 일 때 만 true
||(OR): 둘 다 false 인 경우만 false
!(NOT): true 이면 false 그리고 false 이면 true

=>&& 연산의 경우는 앞의 데이터가 false 이면 뒤의 내용은 확인하지 않음
=>|| 연산의 경우는 앞의 데이터가 true 이면 뒤의 내용은 확인하지 않음

=>Boolean 이외의 데이터를 가지고 && 와 || 연산 가능
이 경우는 결과가 Boolean이 아닐 수 있습니다.

=>Falsy: false 로 간주하는 데이터
0, null, NaN(Not A Number), undefined, ""(아무것도 없는 문자열)

=>Truthy: true로 간주하는 데이터
Falsy 가 아닌 데이터

3)복합 할당 연산자
=>연산 과 할당을 동시에 수행
연산자=
왼쪽이 참조하는 데이터 와 오른쪽 데이터를 연산자를 이용해서 연산을 수행하고 왼쪽의 변수에 참조를 대입합니다.

var x = 10;

x += 9;
//x 가 참조하고 있는 10 + 9 를 하고 그 결과를 x 가 참조하도록 합니다.

4)문자열 연산자
+: 다른 데이터를 문자열로 변환해서 연결을 시켜주는 연산자

*: 숫자로 변환이 가능한 문자열이라면 곱하기를 해서 숫자를 결과로 리턴합니다.

5)삼항 연산자
표현식? 표현식1 : 표현식2;
=>표현식이 true 이면 표현식1 이 남고 false 이면 표현식2 가 남습니다.

6), 연산자
=>연속해서 적용
=>두 피연산자를 모두 평가한 후 오른쪽 피연산자의 값을 반환

7)?? - Nullish Operator
=>왼쪽의 데이터가 null 또는 undefined 일 때 오른쪽 데이터를 리턴하고 그렇지 않으면 왼쪽의 데이터를 리턴하는 연산자
=>|| 를 이용하는 것과 유사하지만 조금 다름

8)new: 생성자를 호출해서 인스턴스를 생성하고 인스턴스의 참조를 리턴하는 연산자

9)this: 생성자나 객체 내부의 함수에서 객체 자신을 가리키는 연산자

10)typeof: 데이터의 자료형을 문자열로 리턴해주는 연산자

11)delete 연산자
=>객체의 속성이나 배열의 요소를 삭제하는 연산자
=>기존 데이터는 undefined

12)instance of
=>객체가 특정 클래스로부터 만들어졌는지 확인하기 위한 연산자

13)in
=>데이터가 객체나 배열의 요소인지 확인해주는 연산자

14)void
=>함수를 만들 때 값을 리턴하지 않도록 지정하기 위한 연산자

15)연산자 우선 순위
=>., [인덱스] : 요소 접근
=>( ) 나 new
=>!, ++, --, typeof, void, delete, 부호 + 와 -
=>%, *, /
=>사칙 연산 +, -
=> >>, >>>, <<
=><, <=, >, >=
=>==, === , !=, !===
=>&, ^, |(순서대로)
=>&&, ||
=>? :
=>=, +=...
=>,

2.제어문(Control Statement)
=>기본적인 명령의 흐름은 왼쪽에서 오른쪽으로 위에서 아래로
=>이런 명령의 흐름을 변경하기 위한 명령어가 제어문입니다.

1)분기문
=>조건이나 값에 따라 다른 문장을 수행하는 것
=>if

if(표현식){
	표현식이 Truthy 일 때 수행할 내용
}
else if(앞의 표현이 Falsy 일 때 다시 평가할 표현식){
	앞의 표현식이 Falsy 이고 현재 표현식이 Truthy 일 때 수행할 내용
}
else{
	앞의 모든 표현식이 Falsy 일 때 수행할 내용
}

else if 는 0개 이상 여러 번 작성 가능

else 는 생략하거나 1번만 작성 가능

if 와 else if 그리고 else 는 별도의 블럭으로 처리

위의 표현식이 true 라면 아래 표현식은 확인하지 않습니다.

=>switch
값에 의한 분기
switch(표현식){
	case 값1:
		표현식의 결과가 값1 일 때 수행할 내용
		break;
	case 값2:
		표현식의 결과가 값2 일 때 수행할 내용
		break;
	...
	default:
		일치하는 값이 없을 때 수행할 내용
		break;
}



표현식의 결과는 문자열이나 정수 또는 Boolean 이어야 합니다.
값의 자리에는 반드시 값을 기재하는 것이 아니라 표현식도 가능
case 문의 개수는 여러 개 가능하지만 생략은 안됨
default 는 생략하거나 1번만 작성
break 가 없으면 break를 만날때까지 모든 내용을 수행합니다.(fall through)

switch(true)로 작성하고 case 문에 Boolean 표현식을 작성하는 것도 가능합니다.

2)반복문(Loop)
=>for
for(처음 한 번 수행되는 식; 판별식; 두번째 수행되는 식){
	반복할 내용;
}

처음 한 번 수행되는 식을 수행하고 판별식을 확인해서 falsy 가 아니면 반복할 내용을 수행하고 이후 부터는 두번째 수행되는 식을 수행하고 판별식을 확인해서 falsy 가 아니면 반복할 내용을 수행합니다.
판별식이 falsy 가 되면 반복 내용을 종료


=>while
while(표현식){
	수행할 내용
}

표현식이 truthy 라면 { } 안의 내용을 수행하고 다시 표현식으로 돌아와서 표현식 Falsy 가 될 때까지 반복


=>do ~ while
do{
	수행할 내용
}while(표현식);

표현식이 뒤에 있어서 어떤 상황속에서도 수행할 내용은 한 번은 실행합니다.
기능적으로는 while 과 동일한데 반드시 한 번은 한다는 의미 전달을 위해 사용합니다.

=>for ~ in
for(임시변수 in 객체 나 배열){
	수행할 내용
}

객체의 경우는 속성 이름을 임시변수에 순서대로 대입
배열의 경우는 각 요소의 인덱스를 임시 변수에 대입

3)제어문 작성 규칙
=>switch를 제외한 제어문에서 수행해야 할 내용이 한 줄 이라면 { } 는 생략이 가능
=>제어문 안에 제어문 사용이 가능
안쪽 제어문에서는 바깥쪽 제어문의 데이터를 사용하는 것이 가능

4)기타 제어문
=>break: switch 나 반복문에서 switch 나 반복문의 수행을 종료하기 위한 명령어
=>continue: 반복문에서 아래 내용을 수행하지 않고 다음 반복으로 진행하기 위한 명령어
=>break 와 continue 는 if 와 함께 사용합니다.

=>return: 함수의 수행을 종료하고 0 개 또는 하나의 데이터를 가지고 호출한 곳으로 돌아가도록 해주는 명령어

3.Function
1)개념
=>한 번에 수행해야 할 코드를 하나의 이름으로 묶어두고 사용하는 것으로 독립적으로 메모리를 할당받아서 수행됨

2)목적
=>중복되는 코드를 방지하기 위해서
=>모듈화 - 코드를 읽기 좋고 실행하기 편리하도록 분할

3)종류
=>Maker Function: 언어 차원에서 제공하는 함수로 JavaScript에서는 window 객체가 제공
=>User Define Function: 개발자가 필요에 의해서 생성한 것
=>3rd party Function: 다른 개발자가 만든 함수
이 함수를 사용할 때는 주의해야 합니다.
보안이나 라이센스 문제를 생각해야 합니다.

4)자바스크립트에서 함수는 일급 객체
=>함수도 하나의 자료형
=>변수에 대입할 수 있고 리턴할 수 도 있음

5)함수를 선언: 함수를 만드는 것
=>예전 방식
function 함수이름(매개변수 나열){
	수행할 내용
	return 데이터; //없는 경우도 있음
} 

=>변수에 대입하는 방식
[var | let | const] 이름 = function(매개변수 나열){
	수행할 내용
	return 데이터; //없는 경우도 있음
} 

=>화살표 함수
[var | let | const] 이름 = (매개변수 나열) => {
	수행할 내용
	return 데이터; //없는 경우도 있음
} 

6)함수 호출(실행)
=>직접 호출: 함수이름(매개변수 대입)

=>콜백(상태 변화 나 이벤트가 발생하면 호출)으로 지정해서 호출: 특정 이벤트가 발생하면 자동으로 함수를 실행하도록 해주는 것

7)함수의 구성
=>이름: 함수를 구별하기 위한 이름 - 이름은 자기 영역에서 중복되면 안됨, 중복되면 이전 내용이 사라짐
=>매개변수(parameter, argument, 인자, 인수 등): 함수를 호출할 때 넘겨주는 데이터
=>return: 함수의 코드를 실행하고 호출 한 곳에 넘겨주는 데이터 - 결과

**Git Hub 의 기본 branch 이름(main) 과 Git 의 기본 branch 이름(master)이 달라서 발생하는 문제를 해결해서 main에 업로드 하기

1.프로젝트를 업로드
1)Git Hub 사이트에 repository를 생성하고 URL을 복사
=>readme.md 파일을 생성한 경우 와 그렇지 않은 경우 중간 작업이 조금 다름
https://github.com/itggangpae/js1107.git

2)현재 프로젝트를 로컬 git 과 연결
=>명령어
git init

3)변경된 내용을 로컬 git 에 반영
=> git add . : u 가 있는 파일을 선택하고 +를 눌러도 됩니다.
=> git commit -m "메시지"

4)branch(저장점 - 변경된 내용을 별도로 관리하고자 할 때 사용) 작업
=>git hub 는 main 이라는 기본 branch 이름을 가지고 있고 git 은 master 라는 저장점을 가지고 있어서 문제가 발생
=>저장점 확인: git branch
=>저장점 이름 변경: git branch -m 현재이름 변경할이름
=>저장점 전환: git branch checkout 브랜치이름
=>저장점 삭제: git branch -d 브랜치이름

git branch

git branch -m master main #master를 main으로 변경

git branch checkout main #main 브랜치로 전환

git branch

5)원격 저장소 연결
=>git remote add 이름 URL #이름은 URL 별로 다른 이름을 사용해야 하는데 많이 사용하는 이름이 origin
git remote add js https://github.com/itggangpae/js1107.git #js 와 뒤의 URL은 자기 것으로 변경

=>확인
git remote -v

=>연결 해제
git remote rm 이름

6)pull - 서버에서 변경된 내용을 다운로드 받아서 반영
=>readme.md를 만든 경우에는 이 작업을 한 번 수행
git config pull.rebase false
git config pull.rebase true
git config pull.ff only
git pull 이름 branch이름 - git pull js main

7)업로드
git push 이름 브랜치이름: git push js main

2.Repository를 복사
git clone URL
git clone https://github.com/itggangpae/javascript.git

3.변경된 내용을 업로드
=> git add . : u 가 있는 파일을 선택하고 +를 눌러도 됩니다.
=> git commit -m "메시지"
=> git push 이름 브랜치이름

4.서버에서 변경된 내용을 반영해서 다운로드
=> git pull 이름 브랜치이름


Web Front End: XHTML, CSS, JavaScript, HTML5, TypeScript, Node.js, react.js

Database(Node 와 의 연동): Maria DB, Mongo DB, Node 와 의 연동, 

=>Toy Project(2주 정도 매일 2시간 정도 - 주제 자유 - 12월 초순)
간단하게 할만한 주제를 미리 선정 - 팀별로 해도 되고 개인이 해도 상관없음
  
Java Back End
 Java 
 Java Web Programming(Servlet & JSP)
 Spring(MVC, DB 연동 - MyBatis, JPA, Spring Boot 등)
 Toy Project - 1월 중순(구정 전후)

=>Toy Project(2주 정도 매일 2시간 정도): 팀 별 프로젝트

Cloud(DevOps & CI/CD)
 Linux
 Git
 Docker
 Kubernetes
 Jenkins
 MSA(Micro Service)
 Private Cloud
 Public Cloud	

Project 3개 - 팀 별 프로젝트















